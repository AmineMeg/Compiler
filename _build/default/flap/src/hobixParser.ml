
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20210419

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WHILE
    | VAL
    | THEN
    | SWITCH
    | STAR
    | SLASH
    | SEMICOLON
    | RPAREN
    | RBRACKET
    | RBRACE
    | PLUS
    | PIPE
    | OR
    | NOTHING
    | NEWBLOCK
    | MINUS
    | LTE
    | LT
    | LSTRING of (
# 15 "flap/src/hobixParser.mly"
      (string)
# 34 "flap/src/hobixParser.ml"
  )
    | LPAREN
    | LOR
    | LCHAR of (
# 16 "flap/src/hobixParser.mly"
      (char)
# 41 "flap/src/hobixParser.ml"
  )
    | LBRACKET
    | LBRACE
    | LAND
    | INT of (
# 19 "flap/src/hobixParser.mly"
      (Int64.t)
# 49 "flap/src/hobixParser.ml"
  )
    | INFIXID of (
# 20 "flap/src/hobixParser.mly"
      (string)
# 54 "flap/src/hobixParser.ml"
  )
    | IN
    | IF
    | ID of (
# 20 "flap/src/hobixParser.mly"
      (string)
# 61 "flap/src/hobixParser.ml"
  )
    | GTE
    | GT
    | FUN
    | FI
    | EXTERN
    | EQUAL
    | EQ
    | EOF
    | ELSE
    | DRARROW
    | DEQUAL
    | COMMA
    | COLON
    | BACKSLASH
    | AND
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 1 "flap/src/hobixParser.mly"
  

  open HobixAST


# 92 "flap/src/hobixParser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AND ->
          45
      | BACKSLASH ->
          44
      | COLON ->
          43
      | COMMA ->
          42
      | DEQUAL ->
          41
      | DRARROW ->
          40
      | ELSE ->
          39
      | EOF ->
          38
      | EQ ->
          37
      | EQUAL ->
          36
      | EXTERN ->
          35
      | FI ->
          34
      | FUN ->
          33
      | GT ->
          32
      | GTE ->
          31
      | ID _ ->
          30
      | IF ->
          29
      | IN ->
          28
      | INFIXID _ ->
          27
      | INT _ ->
          26
      | LAND ->
          25
      | LBRACE ->
          24
      | LBRACKET ->
          23
      | LCHAR _ ->
          22
      | LOR ->
          21
      | LPAREN ->
          20
      | LSTRING _ ->
          19
      | LT ->
          18
      | LTE ->
          17
      | MINUS ->
          16
      | NEWBLOCK ->
          15
      | NOTHING ->
          14
      | OR ->
          13
      | PIPE ->
          12
      | PLUS ->
          11
      | RBRACE ->
          10
      | RBRACKET ->
          9
      | RPAREN ->
          8
      | SEMICOLON ->
          7
      | SLASH ->
          6
      | STAR ->
          5
      | SWITCH ->
          4
      | THEN ->
          3
      | VAL ->
          2
      | WHILE ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AND ->
          Obj.repr ()
      | BACKSLASH ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | DEQUAL ->
          Obj.repr ()
      | DRARROW ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EQ ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXTERN ->
          Obj.repr ()
      | FI ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | GT ->
          Obj.repr ()
      | GTE ->
          Obj.repr ()
      | ID _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INFIXID _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | LAND ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LCHAR _v ->
          Obj.repr _v
      | LOR ->
          Obj.repr ()
      | LPAREN ->
          Obj.repr ()
      | LSTRING _v ->
          Obj.repr _v
      | LT ->
          Obj.repr ()
      | LTE ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | NEWBLOCK ->
          Obj.repr ()
      | NOTHING ->
          Obj.repr ()
      | OR ->
          Obj.repr ()
      | PIPE ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMICOLON ->
          Obj.repr ()
      | SLASH ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | SWITCH ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
  
  and default_reduction =

  
  and error =
    (46, "\160\000\000\000R\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\002\000h\001\154&@\t\160\006h\153\000&\128\025\162d\000\128\000\000\000\128\000\000\000\000\000\b\001\160\006h\153\000&\128\025\162d\000\128\000\002\000\000\000h\001\154&@\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000h\001\154&@\b\000\000\000\000\000\000\000\000\000\000\000\026\000f\137\144\002\000\000\000\000\000\000\000\000\000\b\000\000\000\000\128\000\000\000 \000\000\128\000\000\128\000\000\000 \000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000 \006\128\025\162d\000\128\000\002\000\000\000\000\128\000\002\000\000\002\000\000\000\000\000\000\000\000\000\b\026\000f\137\144\002\000\000\000\000\000\000_\243\183f\148\150\136\025\162d\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000y\014E\024B\026\000f\137\144\002\000\000\000\000\000\001\160\006h\153\000 \000\000\000\000\000\026\000f\137\144\002\023\252\228\217\165%\160\006h\153\000!\127\206M\154RZ\000f\137\144\002\023\252\228\217\165%\160\006h\153\000!\127\200M\130\018Z\000f\137\144\002\023\252\228\217\165%\160\006h\153\000!\127\200M\130\018Z\000f\137\144\002\023\252\228\217\165%\160\006h\153\000!\127\206M\154RZ\000f\137\144\002\023\252\132\216!%\160\006h\153\000!\127\200M\130\018Z\000f\137\144\002\023\252\132\216!%\160\006h\153\000 \000\000\000\000\000\026\000f\137\144\002\007P\228Q\132\000_\243\183f\149\150\128\025\162d\000\133\25596iI\023\252\228\217\165$\028C\145F\016\016\000\000\000 \000\000\000\002\000\000\000\000\128\000\002\000\000\002\000\000\000\000\000\000\000\000\000\128\026\000f\137\144\002\007\016\228Q\132\004\000\000\000\000\000\000\016\000\000\000\000\026\000f\137\144\002\023\252\228\217\165$\\C\145F\016\006\128\025\162d\000\129\1969\020a@h\001\154&@\b\028C\145F\144\000\000\000\000\000\000\001\2289\020a\000\000\000\000\000\000\000\030C\145F\016\000\000\000\000\000\000\001\1969\022a\000\000\012\000\000\000\000\000\000\000\128\000\000\000\000\000\000\b\026\000f\137\144\002\007\028\228Q\132\000\000\016\000\000\000\000\000\000\000\000\016\026\000\230\137\144\002\000\000\000\000\000\000_\243\147f\148\144\000\192\000\000\000\000\000\000\000\000\000\007\016\228Q\132\001\160\006h\153\000!\127\206M\154RA\19694a\000h\001\154&@\b\028\195\145F\016\000\000\000\000\000\000\001\19694a\000h\001\154&@\b\028\195\145F\016\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\b\001\160\006h\153\000 q\014E\024@\026\000f\137\144\002h\001\154&@\b\028C\145f\016\000\000\192\000\000\000\000\001\000\000\000\000\000\000\000\000\001\001\160\014h\153\000 \000\000\000\000\000\000\000\002\000\000\000h\001\154&@\b\030C\145F\016\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\006\128\025\162d\000\129\2289\020a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000f\137\144\002\023\016\228Q\132\001\160\006h\153\000 q\014E\024P\026\000f\137\144\002\007\016\228Q\164\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\b\000\000\000\002\000\000\b\000\000\b\000\000\000\000\000\000\000\000\002\000h\001\154&@\b\028C\145F\016\016\016\000\000\000\000\026\000f\137\144\002\000\000\b\000\000\000\002\000\000\b\000\000\b\000\000\000\000\000\000\000\000\000 h\001\154&@\b\000\000\000\000\000\nq\014\213\029`Z f\137\144\002\000\128\000\000\000\000\000\000\000\000\000\006\128\025\162d\000\129\2129\020a\000\167\016\237Q\214E\160\006h\153\000*q\014E\029`Z\000f\137\144\002\000\000\000\000\000\001\160\006h\153\000 \000\000\000\000\000\026\000f\137\144\002\167\016\228Q\214\005\160\006h\153\000*q\014E\029`Z\000f\137\144\002\167\016\132PR\005\160\006h\153\000*q\014E\029`Z\000f\137\144\002\167\016\132PR\005\160\006h\153\000*q\014E\029`Z\000f\137\144\002\167\016\228Q\214\005\160\006h\153\000*q\bE\005 Z\000f\137\144\002\167\016\132PR\005\160\006h\153\000*q\bE\005 i\1969\020u\129\167\016\228Q\214\006\156C\145GX\026q\014E\029`Z\000f\137\144\002\167\016\228Q\214\006\156C\145GX\000\000\000\000 \000\000\000\002\000\000\000\000\128\000\002\000\000\002\000\000\000\000\000\000\000\000\000\128\026\000f\137\144\002\167\016\228Q\214\004\000\000\000\b\000\000\000\000\128\000\000\000 \000\000\128\000\000\128\000\000\000\000\000\000\000\000 \006\128\025\162d\000\169\1969\020u\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\002\128\000\000\001H\000\000\000\000\000\000\000")
  
  and start =
    1
  
  and action =
    ((16, "\000\158\000\000\000\029\000\021\011\192\n\170\n\170\000\007\000\r\n\170\n\170\000\024\n\170\000\014\000\000\000\000\n\170\000\000\000\000\n\170\000\000\000\n\000\"\000\015\000\022\000\015\000\000\000\000\000@\000 \n\170\000J\000\015\000h\0000\n\170\000\000\000L\n\170\000\000\000v\000\000\nj\n\170\000\000\n\170\000\000\n\170\000\158\n\170\000\240\n\170\001B\n\170\004\202\n\170\001\148\n\170\005\028\n\170\001\230\n\170\0028\n\170\005n\n\170\005\192\n\170\006\018\n\170\000\000\n\170\nj\000\007\n\170\002\138\002\220\n\228\000L\000f\000\015\000\130\000L\n\170\n\228\000\000\000\138\n\170\003.\011\006\n\170\nj\n\170\011\006\000\000\011H\000\000\011\128\000\000\nj\000\003\000h\000j\n\170\nj\000\162\000v\n\170\000\000\003\128\000\003\000\000\r\202\n\170\003\210\nj\n\170\nj\000\000\011\006\n\170\011H\000\000\000\138\000\130\n\170\r\248\011\192\n\170\011H\000\003\000\178\000\132\011\192\000\000\000\176\n\170\011\250\000\000\000\166\000\000\000\000\n\170\0122\000\000\000\000\000\000\n\170\011H\n\170\011\128\n\170\0122\000\000\000\000\000\170\000\198\000\015\000\224\000\172\n\170\n\228\000\254\011\192\000\230\000\015\001\006\000\200\011\192\000\000\004x\n\170\001\012\000\000\n\170\011\006\004$\011\192\006N\011\192\000\000\011\192\000\000\011\192\006\160\011\192\006\242\011\192\012t\011\192\007D\011\192\012\190\011\192\007\150\011\192\007\232\011\192\r\b\011\192\rR\011\192\r\156\b:\b\140\b\222\t0\011\192\t\130\n&\000\226\000\252\000\015\001\026\000\228\011\192\t\212\000\246\001\014\000\015\001(\000\244\011\192\t\212\000\000\000\000\001\004\000\236\001\018\000\000\000\000\001\018\000\000\000\158\000\000"), (16, "\000\181\000\141\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\001\150\000u\000\181\000\181\000\181\000\014\000\181\000\181\000\169\000\181\000\181\000\181\000b\000\181\000\181\000\018\000\"\000\181\000\181\000&\000\181\0002\000:\000\181\000Z\000\181\000^\001*\000\181\000v\000\025\000\181\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000z\000f\000\025\000\025\000\025\000\130\000\154\000\025\000\138\001\030\000\025\000\025\000\142\000\025\000\025\000\166\001>\000\025\000\025\001B\000\025\001J\001N\000\025\001^\000\025\001\154\000\006\000\025\000\n\000\029\000\025\000\174\000\182\000\190\000\029\000\029\000\029\000\198\000\029\000\029\001\158\001\170\000\206\000\214\000\230\001\174\001\242\000\238\001\246\002\018\000\029\000\246\002\022\000\222\000\029\002\"\0022\000\254\001\006\003J\000\029\003\138\002r\001\014\000}\000\029\002v\002~\000\029\002\130\0009\000\029\000\174\000\182\0009\0009\0009\0009\0009\0009\0009\002\142\002\150\0009\0009\0009\002\158\002\162\0009\002\182\003N\0009\0009\003R\0009\0009\003Z\003^\0009\0009\003j\0009\003n\003v\0009\003za\0005\000\174\000\182\000a\000a\000a\000a\000\198\000a\000a\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000a\000\000\000\000\000a\000\246\000\000\000\222\000a\000\000\000\000\000\254\001\006\000\000\000a\000\000\000\000\001\014\000\000\000a\000\000\000\000\000a\000\000\000]\000ai\0001\000\174\000\182\000i\000i\000i\000i\000\198\000i\000i\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000i\000\246\000\000\000\222\000i\000\000\000\000\000\254\001\006\000\000\000i\000\000\000\000\001\014\000\000\000i\000\000\000\000\000i\000\000\000%\000i\000\174\000\182\000%\000%\000%\000%\000\198\000%\000%\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000%\000\246\000\000\000\222\000%\000\000\000\000\000\254\001\006\000\000\000%\000\000\000\000\001\014\000\000\000%\000\000\000\000\000%\000\000\000q\000%\000\174\000\182\000q\000q\000q\000q\000\198\000q\000q\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000q\000\246\000\000\000\222\000q\000\000\000\000\000\254\001\006\000\000\000q\000\000\000\000\001\014\000\000\000q\000\000\000\000\000q\000\000\000!\000qa\000\000\000a\000\000\0005\002\206\002\214\000a\000\000\000\000\000\000\002\222\000\000\000\000\000\000\000\000\002\230\002\238\002\254\000\000\000\000\000a\000\000\000\000\000\000\003\014\000\000\002\246\000\000\000\000\000\000\003\022\003\030\000a\000\000\000a\000\000\003&\000a\000\000\000\000\000]\000\000\000]\000\000\000a\002\206\002\214\000]\000\000\000\000\000\000\002\222\000\000\000\000\000\000\000\000\002\230\002\238\002\254\000\000\000\000\000]\000\000\000\000\000\000\000]\000\000\002\246\000\000\000\000\000\000\003\022\003\030\000]\000\000\000]\000\000\003&\000]\000\000\000\000\000i\000\000\000i\000\000\000]\002\206\002\214\000i\000\000\000\000\000\000\002\222\000\000\000\000\000\000\000\000\002\230\002\238\002\254\000\000\000\000\003\006\000\000\000\000\000\000\003\014\000\000\002\246\000\000\000\000\000\000\003\022\003\030\000i\000\000\000i\000\000\003&\000i\000\000\000\000\000%\000\000\000%\000\000\000i\002\206\002\214\000%\000\000\000\000\000\000\002\222\000\000\000\000\000\000\000\000\002\230\002\238\002\254\000\000\000\000\003\006\000\000\000\000\000\000\003\014\000\000\002\246\000\000\000\000\000\000\003\022\003\030\000%\000\000\000%\000\000\003&\000%\000\000\000\000\000q\000\000\000q\000\000\000%\002\206\002\214\000q\000\000\000\000\000\000\002\222\000\000\000\000\000\000\000\000\002\230\002\238\002\254\000\000\000\000\003\006\000\000\000\000\000\000\003\014\000\000\002\246\000\000\000\000\000\000\003\022\003\030\000q\000\000\000q\000\000\003&\000q\000\000\000\000\000!\000\000\000!\000\000\000qt\000\000\000\t\000\000\003f\002\206\002\214\003>\000\000\000\000\000\000\002\222\000\000\000\000\000\000\000\000\002\230\002\238\002\254\000\000\000\000\003\006\000\000\000\000\000\000\003\014\000\000\002\246\000\000\000\000\000\000\003\022\003\030\000\t\000\000\000\t\000\000\003&\000\t\000\174\000\182\000\190\000\161\001&\001\218\000\198\000\005\000\005\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\001\210\000\246\000\000\000\222\001\146\000\000\000\000\000\254\001\006\000\026\000\030\000\000\000*\001\014\000\000\001r\000\133\000\000\001\022\000\000\000\000\000\000\001\178\000.\0006\000\000\000\000\000>\000B\000\000\000F\000\000\000\000\000\000\000J\000\000\000\000\000N\000R\000\000\000\000\000V\000\174\000\182\000\149\000\000\000\000\000\000\000\198\000\000\000\000\000\000\000~\000\206\000\214\000\230\000\000\001j\000\238\000\174\000\182\000\190\000\246\002\194\000\222\000\198\000\000\000\000\000\254\001\006\000\206\000\214\000\230\000\000\001\014\000\238\000\000\000\000\001\226\000\246\000\000\000\222\001:\000\000\000\000\000\254\001\006\000\000\001z\000\000\002V\001\014\000\174\000\182\000\190\001\130\000\000\001\234\000\198\000\000\000\000\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000\000\000\246\000\000\000\222\002\n\000\000\000\000\000\254\001\006\000\174\000\182\000\190\001\138\001\014\000\000\000\198\000\000\000\000\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000\000\000\246\000\000\000\222\000\000\000\000\000\000\000\254\001\006\000\022\001\238\000\000\002\002\001\014\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\026\002\030\002.\000\000\000\000\0026\002:\000\000\002F\000\000\000\000\000\000\002J\000\000\000\000\002N\002j\000\000\000\000\002n\000\174\000\182\000\190\002*\000\000\000\000\000\198\000\000\000\000\000\000\002\146\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000\000\000\246\000\000\000\222\000\000\000\000\000\000\000\254\001\006\000\174\000\182\000\190\002B\001\014\000\000\000\198\000\000\000\000\000\000\000\000\000\206\000\214\000\230\000\000\000\000\000\238\000\000\000\000\000\000\000\246\000\000\000\222\000\000\000\000\000\000\000\254\001\006\000U\002f
  
  and lhs =
    (4, "\r\204\204\187\187\187\187\187\187\187\187\187\187\187\186\169\152\135veD3\"!\017\017\016")
  
  and goto =
    ((16, "\000\024\000\000\000\000\000\000\000\"\0000\0008\000\000\000\000\000<\000@\000\000\000F\000\000\000\000\000\000\000V\000\000\000\000\000\\\000\000\000\000\000\000\000F\000\000\000\003\000\000\000\000\000\000\000\000\000`\000\000\000r\000\000\000\000\000d\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000l\000\000\000z`\000\000\000\000\000\000\000\000\000\000\000\188\000\000\000\000\001d\000\n\000\000\001h\000\000\000\218\000\000\000\000\001n\000\000\000\000\000\b\000\000\000\000\001~x%&\028t\000q\029d%&b%&%&%&\000`%&Z\000N\028M%&\"-%&%&%&/%&\0281\0003R5%&7%&%&%&\0009%&;\000=\028?%&\159A%&%&%&C%&\028E\000I\167L%&U%&%&%&\000Y%&\\\000^\028i%&\214n%&%&%&s\170\171\028v\000z\221\127%&\207\170\171%&%&\000\130%&\206\000\138\000\144%&\000\149%&%&\170\171\151\170\171\000\153\000\162\000\205%&\204\170\171\170\171\170\171\000\176\170\171\179\000\181\000\183\170\171\000\185\170\171\170\171\170\171\187\170\171\000\189\000\191\000\193\170\171\195\170\171\170\171\170\171\000\197\170\171\199\000\201\000\203\170\171\000\209\170\171j\000po\217o\132\235\224o\234"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (HobixAST.expression) = Obj.magic e in
        let _3 : unit = Obj.magic _3 in
        let x : (
# 19 "flap/src/hobixParser.mly"
      (Int64.t)
# 341 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (int * HobixAST.expression) = 
# 136 "flap/src/hobixParser.mly"
(
  (Int64.to_int x, e)
)
# 352 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (HobixAST.expression) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 393 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (HobixAST.definition) = let d =
          let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 405 "flap/src/hobixParser.ml"
           in
          
# 64 "flap/src/hobixParser.mly"
(
  (x, e)
)
# 412 "flap/src/hobixParser.ml"
          
        in
        
# 45 "flap/src/hobixParser.mly"
(
  let (x, e) = d in
  DefineValue (SimpleValue (x, e))
)
# 421 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ds;
          MenhirLib.EngineTypes.startp = _startpos_ds_;
          MenhirLib.EngineTypes.endp = _endpos_ds_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = x;
                      MenhirLib.EngineTypes.startp = _startpos_x_;
                      MenhirLib.EngineTypes.endp = _endpos_x_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let ds : ((HobixAST.identifier * HobixAST.expression) list) = Obj.magic ds in
        let e : (HobixAST.expression) = Obj.magic e in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (HobixAST.identifier list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 490 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ds_ in
        let _v : (HobixAST.definition) = let d =
          let xs = 
# 232 "<standard.mly>"
    ( xs )
# 500 "flap/src/hobixParser.ml"
           in
          let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 507 "flap/src/hobixParser.ml"
           in
          
# 72 "flap/src/hobixParser.mly"
(
  (x, Fun (xs, e))
)
# 514 "flap/src/hobixParser.ml"
          
        in
        
# 50 "flap/src/hobixParser.mly"
(
  DefineValue (RecFunctions (d :: ds))
)
# 522 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = n;
          MenhirLib.EngineTypes.startp = _startpos_n_;
          MenhirLib.EngineTypes.endp = _endpos_n_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let n : (
# 19 "flap/src/hobixParser.mly"
      (Int64.t)
# 561 "flap/src/hobixParser.ml"
        ) = Obj.magic n in
        let _3 : unit = Obj.magic _3 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 567 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_n_ in
        let _v : (HobixAST.definition) = let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 578 "flap/src/hobixParser.ml"
         in
        
# 54 "flap/src/hobixParser.mly"
(
  DeclareExtern (x, Int64.to_int n)
)
# 585 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (HobixAST.definition) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        
# 57 "flap/src/hobixParser.mly"
        (
  let pos = Position.lex_join _startpos _endpos in
  Error.error "parsing" pos "Syntax error."
)
# 615 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (HobixAST.expression) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (HobixAST.expression) = 
# 83 "flap/src/hobixParser.mly"
(
  s
)
# 642 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (HobixAST.expression) = Obj.magic e2 in
        let _2 : unit = Obj.magic _2 in
        let e1 : (HobixAST.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (HobixAST.expression) = 
# 87 "flap/src/hobixParser.mly"
(
  Define (SimpleValue (Id "__nothing__", e1), e2)
)
# 683 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (HobixAST.expression) = Obj.magic e2 in
        let _3 : unit = Obj.magic _3 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 738 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e2_ in
        let _v : (HobixAST.expression) = let vdef =
          let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 750 "flap/src/hobixParser.ml"
           in
          
# 64 "flap/src/hobixParser.mly"
(
  (x, e)
)
# 757 "flap/src/hobixParser.ml"
          
        in
        
# 91 "flap/src/hobixParser.mly"
(
  let (id,e1) = vdef in Define (SimpleValue (id, e1),e2)
)
# 765 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ds;
              MenhirLib.EngineTypes.startp = _startpos_ds_;
              MenhirLib.EngineTypes.endp = _endpos_ds_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e_inlined1;
                MenhirLib.EngineTypes.startp = _startpos_e_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos_e_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__4_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__4_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = xs;
                      MenhirLib.EngineTypes.startp = _startpos_xs_;
                      MenhirLib.EngineTypes.endp = _endpos_xs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = x;
                          MenhirLib.EngineTypes.startp = _startpos_x_;
                          MenhirLib.EngineTypes.endp = _endpos_x_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (HobixAST.expression) = Obj.magic e in
        let _4 : unit = Obj.magic _4 in
        let ds : ((HobixAST.identifier * HobixAST.expression) list) = Obj.magic ds in
        let e_inlined1 : (HobixAST.expression) = Obj.magic e_inlined1 in
        let _5 : unit = Obj.magic _5 in
        let _4_inlined1 : unit = Obj.magic _4_inlined1 in
        let xs : (HobixAST.identifier list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 848 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (HobixAST.expression) = let d =
          let e = e_inlined1 in
          let xs = 
# 232 "<standard.mly>"
    ( xs )
# 859 "flap/src/hobixParser.ml"
           in
          let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 866 "flap/src/hobixParser.ml"
           in
          
# 72 "flap/src/hobixParser.mly"
(
  (x, Fun (xs, e))
)
# 873 "flap/src/hobixParser.ml"
          
        in
        
# 95 "flap/src/hobixParser.mly"
(
  Define (RecFunctions (d::ds), e)
)
# 881 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let b : (HobixAST.expression) = Obj.magic b in
        let _3 : unit = Obj.magic _3 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (HobixAST.expression) = 
# 99 "flap/src/hobixParser.mly"
(
  While (e, b)
)
# 936 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (HobixAST.expression) = 
# 103 "flap/src/hobixParser.mly"
(
  AllocateBlock e
)
# 984 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = b;
                    MenhirLib.EngineTypes.startp = _startpos_b_;
                    MenhirLib.EngineTypes.endp = _endpos_b_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let i : (HobixAST.expression) = Obj.magic i in
        let _2 : unit = Obj.magic _2 in
        let b : (HobixAST.expression) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = 
# 107 "flap/src/hobixParser.mly"
(
  WriteBlock (b, i, rhs)
)
# 1046 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 1080 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 171 "flap/src/hobixParser.mly"
            ( String.(sub x 0 (length x - 1)) )
# 1089 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1096 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 172 "flap/src/hobixParser.mly"
        ( "`+`"  )
# 1135 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1142 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 173 "flap/src/hobixParser.mly"
        ( "`-`"  )
# 1181 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1188 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 174 "flap/src/hobixParser.mly"
        ( "`*`"  )
# 1227 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1234 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 175 "flap/src/hobixParser.mly"
        ( "`/`"  )
# 1273 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1280 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 176 "flap/src/hobixParser.mly"
        ( "`>?`"  )
# 1319 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1326 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 177 "flap/src/hobixParser.mly"
        ( "`>=?`" )
# 1365 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1372 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 178 "flap/src/hobixParser.mly"
        ( "`<?`"  )
# 1411 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1418 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 179 "flap/src/hobixParser.mly"
        ( "`<=?`" )
# 1457 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1464 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 180 "flap/src/hobixParser.mly"
        ( "`=?`"  )
# 1503 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1510 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 181 "flap/src/hobixParser.mly"
        ( "`&&`" )
# 1549 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1556 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lhs;
              MenhirLib.EngineTypes.startp = _startpos_lhs_;
              MenhirLib.EngineTypes.endp = _endpos_lhs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let rhs : (HobixAST.expression) = Obj.magic rhs in
        let _1 : unit = Obj.magic _1 in
        let lhs : (HobixAST.expression) = Obj.magic lhs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lhs_ in
        let _endpos = _endpos_rhs_ in
        let _v : (HobixAST.expression) = let b = 
# 182 "flap/src/hobixParser.mly"
        ( "`||`" )
# 1595 "flap/src/hobixParser.ml"
         in
        
# 111 "flap/src/hobixParser.mly"
(
  Apply (Variable (Id b), [lhs; rhs])
)
# 1602 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = c;
                    MenhirLib.EngineTypes.startp = _startpos_c_;
                    MenhirLib.EngineTypes.endp = _endpos_c_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _5 : unit = Obj.magic _5 in
        let t : (HobixAST.expression) = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let c : (HobixAST.expression) = Obj.magic c in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (HobixAST.expression) = 
# 115 "flap/src/hobixParser.mly"
(
  IfThenElse (c, t, e)
)
# 1671 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (HobixAST.expression) = Obj.magic e in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (HobixAST.identifier list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (HobixAST.expression) = let xs = 
# 232 "<standard.mly>"
    ( xs )
# 1731 "flap/src/hobixParser.ml"
         in
        
# 121 "flap/src/hobixParser.mly"
(
  Fun (xs, e)
)
# 1738 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = bs;
                MenhirLib.EngineTypes.startp = _startpos_bs_;
                MenhirLib.EngineTypes.endp = _endpos_bs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let bs : ((int * HobixAST.expression) list) = Obj.magic bs in
        let _3 : unit = Obj.magic _3 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (HobixAST.expression) = let d = 
# 132 "flap/src/hobixParser.mly"
                         ( None )
# 1805 "flap/src/hobixParser.ml"
         in
        
# 125 "flap/src/hobixParser.mly"
(
  let i = List.fold_left (fun i (j, _) -> max i j) 0 bs in
  let abs = Array.make i None in
  List.iter (fun (i, e) -> abs.(i) <- Some e) bs;
  Switch (e, abs, d)
)
# 1815 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_e_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_e_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = bs;
                MenhirLib.EngineTypes.startp = _startpos_bs_;
                MenhirLib.EngineTypes.endp = _endpos_bs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e_inlined1 : (HobixAST.expression) = Obj.magic e_inlined1 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let bs : ((int * HobixAST.expression) list) = Obj.magic bs in
        let _3 : unit = Obj.magic _3 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_inlined1_ in
        let _v : (HobixAST.expression) = let d =
          let e = e_inlined1 in
          
# 133 "flap/src/hobixParser.mly"
               ( Some e )
# 1884 "flap/src/hobixParser.ml"
          
        in
        
# 125 "flap/src/hobixParser.mly"
(
  let i = List.fold_left (fun i (j, _) -> max i j) 0 bs in
  let abs = Array.make i None in
  List.iter (fun (i, e) -> abs.(i) <- Some e) bs;
  Switch (e, abs, d)
)
# 1895 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((int * HobixAST.expression) list) = 
# 211 "<standard.mly>"
    ( [] )
# 1913 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((int * HobixAST.expression) list) = Obj.magic xs in
        let x : (int * HobixAST.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((int * HobixAST.expression) list) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 1945 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (HobixAST.t) = 
# 211 "<standard.mly>"
    ( [] )
# 1963 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (HobixAST.t) = Obj.magic xs in
        let x : (HobixAST.definition) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (HobixAST.t) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 1995 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (HobixAST.expression list) = 
# 142 "<standard.mly>"
    ( [] )
# 2013 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (HobixAST.expression list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.expression list) = 
# 144 "<standard.mly>"
    ( x )
# 2038 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (HobixAST.identifier list) = 
# 142 "<standard.mly>"
    ( [] )
# 2056 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (HobixAST.identifier list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.identifier list) = 
# 144 "<standard.mly>"
    ( x )
# 2081 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((HobixAST.identifier * HobixAST.expression) list) = 
# 77 "flap/src/hobixParser.mly"
                      ( [] )
# 2099 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ds;
          MenhirLib.EngineTypes.startp = _startpos_ds_;
          MenhirLib.EngineTypes.endp = _endpos_ds_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = x;
                      MenhirLib.EngineTypes.startp = _startpos_x_;
                      MenhirLib.EngineTypes.endp = _endpos_x_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let ds : ((HobixAST.identifier * HobixAST.expression) list) = Obj.magic ds in
        let e : (HobixAST.expression) = Obj.magic e in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (HobixAST.identifier list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 2168 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ds_ in
        let _v : ((HobixAST.identifier * HobixAST.expression) list) = let d =
          let xs = 
# 232 "<standard.mly>"
    ( xs )
# 2178 "flap/src/hobixParser.ml"
           in
          let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 2185 "flap/src/hobixParser.ml"
           in
          
# 72 "flap/src/hobixParser.mly"
(
  (x, Fun (xs, e))
)
# 2192 "flap/src/hobixParser.ml"
          
        in
        
# 79 "flap/src/hobixParser.mly"
( d::ds )
# 2198 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ds;
            MenhirLib.EngineTypes.startp = _startpos_ds_;
            MenhirLib.EngineTypes.endp = _endpos_ds_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ds : (HobixAST.t) = Obj.magic ds in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ds_ in
        let _endpos = _endpos__2_ in
        let _v : (HobixAST.t) = 
# 39 "flap/src/hobixParser.mly"
(
  ds
)
# 2232 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (HobixAST.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.expression list) = 
# 241 "<standard.mly>"
    ( [ x ] )
# 2257 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (HobixAST.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (HobixAST.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (HobixAST.expression list) = 
# 243 "<standard.mly>"
    ( x :: xs )
# 2296 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 2317 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.identifier list) = let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 2327 "flap/src/hobixParser.ml"
         in
        
# 241 "<standard.mly>"
    ( [ x ] )
# 2332 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (HobixAST.identifier list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 2367 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (HobixAST.identifier list) = let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 2377 "flap/src/hobixParser.ml"
         in
        
# 243 "<standard.mly>"
    ( x :: xs )
# 2382 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (HobixAST.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let a : (HobixAST.expression) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos__4_ in
        let _v : (HobixAST.expression) = let bs = 
# 232 "<standard.mly>"
    ( xs )
# 2428 "flap/src/hobixParser.ml"
         in
        
# 143 "flap/src/hobixParser.mly"
(
  Apply (a, bs)
)
# 2435 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = b;
                MenhirLib.EngineTypes.startp = _startpos_b_;
                MenhirLib.EngineTypes.endp = _endpos_b_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let i : (HobixAST.expression) = Obj.magic i in
        let _2 : unit = Obj.magic _2 in
        let b : (HobixAST.expression) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos__4_ in
        let _v : (HobixAST.expression) = 
# 147 "flap/src/hobixParser.mly"
(
  ReadBlock (b, i)
)
# 2483 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : (HobixAST.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : (HobixAST.expression) = 
# 152 "flap/src/hobixParser.mly"
(
  e
)
# 2510 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 19 "flap/src/hobixParser.mly"
      (Int64.t)
# 2531 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.expression) = let l = 
# 186 "flap/src/hobixParser.mly"
(
  LInt x
)
# 2541 "flap/src/hobixParser.ml"
         in
        
# 158 "flap/src/hobixParser.mly"
(
  Literal l
)
# 2548 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (
# 19 "flap/src/hobixParser.mly"
      (Int64.t)
# 2575 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.expression) = let l = 
# 190 "flap/src/hobixParser.mly"
(
  LInt (Int64.neg x)
)
# 2586 "flap/src/hobixParser.ml"
         in
        
# 158 "flap/src/hobixParser.mly"
(
  Literal l
)
# 2593 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 15 "flap/src/hobixParser.mly"
      (string)
# 2614 "flap/src/hobixParser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (HobixAST.expression) = let l = 
# 194 "flap/src/hobixParser.mly"
(
  LString s
)
# 2624 "flap/src/hobixParser.ml"
         in
        
# 158 "flap/src/hobixParser.mly"
(
  Literal l
)
# 2631 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (
# 16 "flap/src/hobixParser.mly"
      (char)
# 2652 "flap/src/hobixParser.ml"
        ) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (HobixAST.expression) = let l = 
# 198 "flap/src/hobixParser.mly"
(
  LChar c
)
# 2662 "flap/src/hobixParser.ml"
         in
        
# 158 "flap/src/hobixParser.mly"
(
  Literal l
)
# 2669 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 20 "flap/src/hobixParser.mly"
      (string)
# 2690 "flap/src/hobixParser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (HobixAST.expression) = let x = 
# 202 "flap/src/hobixParser.mly"
                         (
  Id x
)
# 2700 "flap/src/hobixParser.ml"
         in
        
# 162 "flap/src/hobixParser.mly"
(
  HobixAST.Variable x
)
# 2707 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let e : (HobixAST.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (HobixAST.expression) = 
# 166 "flap/src/hobixParser.mly"
(
  e
)
# 2748 "flap/src/hobixParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let program =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (HobixAST.t))

module Incremental = struct
  
  let program =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (HobixAST.t) MenhirInterpreter.checkpoint)
  
end

# 269 "<standard.mly>"
  

# 2789 "flap/src/hobixParser.ml"
